(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = global || self, factory(global.idb = {}));
}(this, (function (exports) { 'use strict';

    const a=new WeakMap,b=new WeakMap,c=new WeakMap,d=new WeakMap,e=new WeakMap;let f=0;function g(a){return"nextupgradeneeded"===a.type?new Promise(b=>{a.target.oncomplete=a.target.onsuccess=()=>b(k(a))}).then(b=>{c.get(b)(a.target.result,a.target.transaction.db,a)}):k(a)}function k(c){const f=c.target.transaction;f&&b.set(f,new Promise((a,b)=>{f.oncomplete=f.onabort=f.onerror=c=>{const d=c.target;c.target instanceof IDBTransaction&&(d.db,d.error),c.error?b(c.error):a()}}));const g=l(c.target.result);return g instanceof IDBRequest&&g.s.add(c.target),g}const h={get(f,g,h){if(f instanceof IDBTransaction){if("done"===g)return b.get(f);if("store"===g)return h.objectStoreNames[0]?f.objectStore(h.objectStoreNames[0]):void 0}return l(f[g])},set:(a,b,c)=>(a[b]=c,!0),has:(a,c)=>a instanceof IDBTransaction&&("done"==c||"store"==c)||c in a};function l(b){if(b instanceof IDBRequest){const c=(a=>new Promise((b,c)=>{a.onsuccess=()=>b(k(a)),a.onerror=()=>c(a.error)}))(b);return c.s=new Set,c.then(a=>(a instanceof IDBRequest&&a.s.add(b),a))}return e.has(b)?e.get(b):new Proxy(b,h)}function m(a){if(e.has(a))return e.get(a)}const n=(a,b,{blocked:c,upgrade:d,blocking:g,terminated:k}={})=>{const m=indexedDB.open(a,b);let n;const o=l(m);return o.s=new Set,o.then(a=>(a.s=o.s,n=a,d&&a.versionchange.s.add(b=>{b.target.result.close()}),c&&a.addEventListener("blocked",()=>c()),k&&a.addEventListener("terminated",()=>k()),g&&a.addEventListener("versionchange",a=>{n.close()}),a)),d&&m.addEventListener("upgradeneeded",a=>{d(l(m.result),a.oldVersion,a.newVersion,l(m.transaction))}),o};

    exports.openDB = n;
    exports.unwrap = function(a){return l(a)};
    exports.wrap = m;

})));